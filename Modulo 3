-- criação do banco de dados para o cenário de E-commerce 
-- drop database ecommerce;
create database ecommerce;
use ecommerce;

-- criar tabela cliente
create table clients(
		idClient int auto_increment primary key,
        Fname varchar(10),
        Minit char(3),
        Lname varchar(20),
        CPF char(11) not null,
        Address varchar(255),
        constraint unique_cpf_client unique (CPF)
);

alter table clients auto_increment=1;

-- desc clients;
-- criar tabela produto

-- size = dimensão do produto
create table product(
		idProduct int auto_increment primary key,
        Pname varchar(255) not null,
        classification_kids bool default false,
        category enum('Eletrônico','Vestimenta','Brinquedos','Alimentos','Móveis') not null,
        avaliação float default 0,
        size varchar(10)
);

alter table product auto_increment=1;


-- para ser continuado no desafio: termine de implementar a tabela e crie a conexão com as tabelas necessárias
-- além disso, reflita essa modificação no diagrama de esquema relacional
-- criar constraints relacionadas ao pagamento

create table payments(
	idclient int,
    idPayment int,
    typePayment enum('Boleto','Cartão','Dois cartões'),
    limitAvailable float,
    primary key(idClient, idPayment)
);


-- criar tabela pedido
-- drop table orders;
create table orders(
	idOrder int auto_increment primary key,
    idOrderClient int,
    orderStatus enum('Cancelado','Confirmado','Em processamento') default 'Em processamento',
    orderDescription varchar(255),
    sendValue float default 10,
    paymentCash boolean default false, 
    constraint fk_ordes_client foreign key (idOrderClient) references clients(idClient)
			on update cascade
);
alter table orders auto_increment=1;

desc orders;

-- criar tabela estoque
create table productStorage(
	idProdStorage int auto_increment primary key,
    storageLocation varchar(255),
    quantity int default 0
);
alter table productStorage auto_increment=1;


-- criar tabela fornecedor
create table supplier(
	idSupplier int auto_increment primary key,
    SocialName varchar(255) not null,
    CNPJ char(15) not null,
    contact char(11) not null,
    constraint unique_supplier unique (CNPJ)
);
alter table supplier auto_increment=1;

desc supplier;

-- criar tabela vendedor
create table seller(
	idSeller int auto_increment primary key,
    SocialName varchar(255) not null,
    AbstName varchar(255),
    CNPJ char(15),
    CPF char(9),
    location varchar(255),
    contact char(11) not null,
    constraint unique_cnpj_seller unique (CNPJ),
    constraint unique_cpf_seller unique (CPF)
);

alter table seller auto_increment=1;


-- tabelas de relacionamentos M:N

create table productSeller(
	idPseller int,
    idPproduct int,
    prodQuantity int default 1,
    primary key (idPseller, idPproduct),
    constraint fk_product_seller foreign key (idPseller) references seller(idSeller),
    constraint fk_product_product foreign key (idPproduct) references product(idProduct)
);

desc productSeller;

create table productOrder(
	idPOproduct int,
    idPOorder int,
    poQuantity int default 1,
    poStatus enum('Disponível', 'Sem estoque') default 'Disponível',
    primary key (idPOproduct, idPOorder),
    constraint fk_productorder_product foreign key (idPOproduct) references product(idProduct),
    constraint fk_productorder_order foreign key (idPOorder) references orders(idOrder)

);

create table storageLocation(
	idLproduct int,
    idLstorage int,
    location varchar(255) not null,
    primary key (idLproduct, idLstorage),
    constraint fk_storage_location_product foreign key (idLproduct) references product(idProduct),
    constraint fk_storage_location_storage foreign key (idLstorage) references productStorage(idProdStorage)
);

create table productSupplier(
	idPsSupplier int,
    idPsProduct int,
    quantity int not null,
    primary key (idPsSupplier, idPsProduct),
    constraint fk_product_supplier_supplier foreign key (idPsSupplier) references supplier(idSupplier),
    constraint fk_product_supplier_prodcut foreign key (idPsProduct) references product(idProduct)
);

-- Alteracao da tabela payments--

drop table payments; 

create table payments(
    idclient int,
    idPayment int default 1,
    typePayment enum('Boleto','Cartão','Dois cartões') default 'Boleto',
    limitAvailable float,
    primary key(idClient, idPayment),
    constraint fk_clients foreign key (idClient) references clients(idClient)
    on update cascade
    ); 
    

desc productSupplier;

show tables;

show databases;
use information_schema;
show tables;
desc referential_constraints;
select * from referential_constraints where constraint_schema = 'ecommerce';

---------------------------------------------------------------------------------------------------------------------------------------------------
-- inserção de dados e queries
use ecommerce;

show tables;
-- idClient, Fname, Minit, Lname, CPF, Address
insert into Clients (Fname, Minit, Lname, CPF, Address) 
	   values('Maria','M','Silva', 12346789, 'rua silva de prata 29, Carangola - Cidade das flores'),
		     ('Matheus','O','Pimentel', 987654321,'rua alemeda 289, Centro - Cidade das flores'),
			 ('Ricardo','F','Silva', 45678913,'avenida alemeda vinha 1009, Centro - Cidade das flores'),
			 ('Julia','S','França', 789123456,'rua lareijras 861, Centro - Cidade das flores'),
			 ('Roberta','G','Assis', 98745631,'avenidade koller 19, Centro - Cidade das flores'),
			 ('Isabela','M','Cruz', 654789123,'rua alemeda das flores 28, Centro - Cidade das flores');


-- idProduct, Pname, classification_kids boolean, category('Eletrônico','Vestimenta','Brinquedos','Alimentos','Móveis'), avaliação, size
insert into product (Pname, classification_kids, category, avaliação, size) values
							  ('Fone de ouvido',false,'Eletrônico','4',null),
                              ('Barbie Elsa',true,'Brinquedos','3',null),
                              ('Body Carters',true,'Vestimenta','5',null),
                              ('Microfone Vedo - Youtuber',False,'Eletrônico','4',null),
                              ('Sofá retrátil',False,'Móveis','3','3x57x80'),
                              ('Farinha de arroz',False,'Alimentos','2',null),
                              ('Fire Stick Amazon',False,'Eletrônico','3',null);

select * from clients;
select * from product;
-- idOrder, idOrderClient, orderStatus, orderDescription, sendValue, paymentCash

delete from orders where idOrderClient in  (1,2,3,4);
insert into orders (idOrderClient, orderStatus, orderDescription, sendValue, paymentCash) values 
							 (1, default,'compra via aplicativo',null,1),
                             (2,default,'compra via aplicativo',50,0),
                             (3,'Confirmado',null,null,1),
                             (4,default,'compra via web site',150,0);

-- idPOproduct, idPOorder, poQuantity, poStatus
select * from orders;
insert into productOrder (idPOproduct, idPOorder, poQuantity, poStatus) values
						 (1,5,2,null),
                         (2,5,1,null),
                         (3,6,1,null);

-- storageLocation,quantity



-- idLproduct, idLstorage, location
insert into storageLocation (idLproduct, idLstorage, location) values
						 (1,2,'RJ'),
                         (2,6,'GO');

-- idSupplier, SocialName, CNPJ, contact
insert into supplier (SocialName, CNPJ, contact) values 
							('Almeida e filhos', 123456789123456,'21985474'),
                            ('Eletrônicos Silva',854519649143457,'21985484'),
                            ('Eletrônicos Valma', 934567893934695,'21975474');
                            
select * from supplier;
-- idPsSupplier, idPsProduct, quantity
insert into productSupplier (idPsSupplier, idPsProduct, quantity) values
						 (1,1,500),
                         (1,2,400),
                         (2,4,633),
                         (3,3,5),
                         (2,5,10);

-- idSeller, SocialName, AbstName, CNPJ, CPF, location, contact
insert into seller (SocialName, AbstName, CNPJ, CPF, location, contact) values 
						('Tech eletronics', null, 123456789456321, null, 'Rio de Janeiro', 219946287),
					    ('Botique Durgas',null,null,123456783,'Rio de Janeiro', 219567895),
						('Kids World',null,456789123654485,null,'São Paulo', 1198657484);

select * from seller;
-- idPseller, idPproduct, prodQuantity
insert into productSeller (idPseller, idPproduct, prodQuantity) values 
						 (1,6,80),
                         (2,7,10);


 -- Nova Insercao payments--

insert into payments (idclient, idPayment, typePayment,limitAvailable ) values
                         (1,1,'Boleto',100),
                         (2,2,'Cartão',500),
                         (3,3,'Dois cartões',400),
                         (4,4,'Cartão',300);

-- Nova Insercao productstorage -- 

insert into (idProdStorage, storageLocation, quantity) values
                (2,'RJ',20),
                (6,'Go',30);
  ------------------------------------------------------------------------------------------------------------------------------------------------
show databases;
use ecommerce;
show tables; 
select * from clients; 
select * from orders; 
select * from payments; 
select * from product; 
select * from productorder; 
select * from productseller; 
select * from productstorage; 
select * from productsupplier;
select * from seller; 
select * from storagelocation; 
select * from supplier; 

         -------------------------------- praticando ------------------------------
         
desc clients; 

-- Using Select Aliases 

select * from clients;

select concat(Fname,' ',Minit,' ',Lname) as Nome_do_Cliente, CPF 
from clients; 

select count(*) from clients;


-- Using Where 

select concat(Fname,' ',Minit,' ',Lname) as Nome_do_Cliente 
from clients
where (CPF=98745631);

SELECT * FROM clients
WHERE Fname='Maria' AND Lname='Silva';

SELECT * FROM clients
WHERE NOT Fname='Maria' AND NOT Fname='Isabela';

select pname, category
from product
where avaliação > 3;  

select concat(Fname,' ',Lname) as Cliente, idOrder as Requesicao, orderStatus as Status from clients c, orders o where c.idClient = idOrderClient;

select * from clients c, orders o where c.idClient = idOrderClient;

select Fname,Lname, idOrder, orderStatus from clients c, orders o where c.idClient = idOrderClient;

-- Using distinct 

select * from orders; 

SELECT DISTINCT orderStatus FROM orders;
       
SELECT COUNT(DISTINCT orderStatus) FROM orders;


-- Using ORDER BY

SELECT * FROM clients
ORDER BY Fname;


 -- Using Joins 
 
select * from clients c, orders o where c.idClient = idOrderClient;

select idOrder, Fname, Lname
from clients c, orders o where c.idClient = idOrderClient and orderStatus='confirmado'; 

select idOrder, Fname, Lname, oderStatus
from clients c, orders o where c.idClient = idOrderClient and oderDescription ='compra via aplicativo'; 

select count(*) from clients c, orders o 
			where c.idClient = o.idOrderClient;
            
SELECT idclient, Fname, Lname, orderStatus, orderDescription
FROM clients 
INNER JOIN orders ON idOrderClient=idClient; 


SELECT idclient, Fname, Lname, typePayment, limitAvailable
FROM clients 
join payments using (idclient); 


SELECT idclient, Fname, Lname, orderStatus, orderDescription, typePayment, limitAvailable
FROM clients 
INNER JOIN orders ON idOrderClient=idClient
join payments using (idclient);   

select * from product JOIN productseller;     

select Pname, category, prodQuantity
from product
left JOIN productseller ON idPproduct=idProduct;
        
-- Group by
select c.idClient, Fname, count(*) as Number_of_orders from clients c 
				inner join orders o ON c.idClient = o.idOrderClient
		group by idClient; 
        
	select c.idClient, Fname, count(*) as Number_of_orders from clients c 
				inner join orders o ON c.idClient = o.idOrderClient
		group by idClient; 


-- count 

select count(*) from clients c, orders o 
			where c.idClient = idOrderClient;
            
select count(*) from clients;
            
 -- Distinct

select DISTINCT pname, category, prodquantity from product join productseller LIMIT 7; 

-- having 
        
SELECT COUNT(idPseller)
FROM productseller
HAVING COUNT(idPseller) > 1;


-- order by 

select * from clients c 
				inner join orders o ON c.idClient = o.idOrderClient
                inner join productOrder p on p.idPOorder = o.idOrder 
		order by idClient; 


	select * from product as p 
			 left join productseller ps on ps.idPproduct= p.idProduct
             right join seller s on s.idSeller=p.idProduct; 
                                 
